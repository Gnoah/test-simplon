{"ast":null,"code":"import axios from 'axios';\nimport { GET_ERRORS, SET_CURRENT_USER } from './type';\nimport setAuthToken from '../setAuthtoken';\nimport jwt_decode from 'jwt-decode';\nexport const registerUser = (user, history) => dispatch => {\n  axios.post('https://simplontest04.herokuapp.com/register', user).then(res => {\n    history.push('/login');\n    localStorage.setItem('id2', res.data.id);\n    localStorage.setItem('nom2', res.data.nom);\n    localStorage.setItem('login', true);\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const loginUser = (user, history) => dispatch => {\n  axios.post('https://simplontest04.herokuapp.com/login', user).then(res => {\n    // console.log(res.data);\n    const token = res.data.token;\n    localStorage.setItem('jwtToken', res.data.nom);\n    localStorage.setItem('id', res.data.id);\n    localStorage.setItem('login', true);\n    console.log(res.data);\n    setAuthToken(token);\n    const decoded = jwt_decode(token);\n    dispatch(setCurrentUser(decoded));\n\n    if (res.data.password !== 'Incorrect Password') {\n      window.location = '/admin';\n    }\n  });\n};\nexport const logoutUser = history => dispatch => {\n  localStorage.removeItem('jwtToken');\n  localStorage.setItem('login', false);\n  setAuthToken(false);\n  dispatch(setCurrentUser({}));\n  history.push('/login');\n};\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};","map":{"version":3,"sources":["/home/dev/Bureau/Popop/test-simplon/src/actions/authentificate.js"],"names":["axios","GET_ERRORS","SET_CURRENT_USER","setAuthToken","jwt_decode","registerUser","user","history","dispatch","post","then","res","push","localStorage","setItem","data","id","nom","catch","err","type","payload","response","loginUser","token","console","log","decoded","setCurrentUser","password","window","location","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAoBC,gBAApB,QAA4C,QAA5C;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmBC,QAAQ,IAAI;AACvDR,EAAAA,KAAK,CAACS,IAAN,CAAW,8CAAX,EAA2DH,IAA3D,EACSI,IADT,CACcC,GAAG,IAAI;AACTJ,IAAAA,OAAO,CAACK,IAAR,CAAa,QAAb;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BH,GAAG,CAACI,IAAJ,CAASC,EAArC;AACAH,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA4BH,GAAG,CAACI,IAAJ,CAASE,GAArC;AACAJ,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8B,IAA9B;AACH,GANT,EAOSI,KAPT,CAOeC,GAAG,IAAI;AACVX,IAAAA,QAAQ,CAAC;AACLY,MAAAA,IAAI,EAAEnB,UADD;AAELoB,MAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaP;AAFjB,KAAD,CAAR;AAIH,GAZT;AAaH,CAdM;AAgBP,OAAO,MAAMQ,SAAS,GAAG,CAACjB,IAAD,EAAMC,OAAN,KAAkBC,QAAQ,IAAI;AACnDR,EAAAA,KAAK,CAACS,IAAN,CAAW,2CAAX,EAAwDH,IAAxD,EACSI,IADT,CACcC,GAAG,IAAI;AACT;AADS,UAEDa,KAFC,GAESb,GAAG,CAACI,IAFb,CAEDS,KAFC;AAGTX,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,GAAG,CAACI,IAAJ,CAASE,GAA1C;AACAJ,IAAAA,YAAY,CAACC,OAAb,CAAqB,IAArB,EAA2BH,GAAG,CAACI,IAAJ,CAASC,EAApC;AACAH,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8B,IAA9B;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYf,GAAG,CAACI,IAAhB;AACAZ,IAAAA,YAAY,CAACqB,KAAD,CAAZ;AACA,UAAMG,OAAO,GAAGvB,UAAU,CAACoB,KAAD,CAA1B;AACAhB,IAAAA,QAAQ,CAACoB,cAAc,CAACD,OAAD,CAAf,CAAR;;AACA,QAAGhB,GAAG,CAACI,IAAJ,CAASc,QAAT,KAAqB,oBAAxB,EACA;AACEC,MAAAA,MAAM,CAACC,QAAP,GAAgB,QAAhB;AACF;AAEH,GAhBT;AAiBH,CAlBM;AAmBP,OAAO,MAAMC,UAAU,GAAIzB,OAAD,IAAaC,QAAQ,IAAI;AAC/CK,EAAAA,YAAY,CAACoB,UAAb,CAAwB,UAAxB;AACApB,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8B,KAA9B;AACAX,EAAAA,YAAY,CAAC,KAAD,CAAZ;AACAK,EAAAA,QAAQ,CAACoB,cAAc,CAAC,EAAD,CAAf,CAAR;AACArB,EAAAA,OAAO,CAACK,IAAR,CAAa,QAAb;AACH,CANM;AAOP,OAAO,MAAMgB,cAAc,GAAGD,OAAO,IAAI;AACrC,SAAO;AACHP,IAAAA,IAAI,EAAElB,gBADH;AAEHmB,IAAAA,OAAO,EAAEM;AAFN,GAAP;AAIH,CALM","sourcesContent":["import axios from 'axios';\nimport { GET_ERRORS,SET_CURRENT_USER } from './type';\nimport setAuthToken from '../setAuthtoken';\nimport jwt_decode from 'jwt-decode';\n\nexport const registerUser = (user, history) => dispatch => {\n    axios.post('https://simplontest04.herokuapp.com/register', user)\n            .then(res => {\n                history.push('/login');\n                localStorage.setItem('id2', res.data.id);\n                localStorage.setItem('nom2',res.data.nom);\n                localStorage.setItem('login', true)\n            })\n            .catch(err => {\n                dispatch({\n                    type: GET_ERRORS,\n                    payload: err.response.data\n                });\n            });\n}\n\nexport const loginUser = (user,history) => dispatch => {\n    axios.post('https://simplontest04.herokuapp.com/login', user)\n            .then(res => {\n                // console.log(res.data);\n                const { token } = res.data;\n                localStorage.setItem('jwtToken', res.data.nom);\n                localStorage.setItem('id', res.data.id);\n                localStorage.setItem('login', true)\n                console.log(res.data)\n                setAuthToken(token);\n                const decoded = jwt_decode(token);\n                dispatch(setCurrentUser(decoded));\n                if(res.data.password!== 'Incorrect Password')\n                {\n                  window.location='/admin';\n               }\n                \n            })\n}\nexport const logoutUser = (history) => dispatch => {\n    localStorage.removeItem('jwtToken');\n    localStorage.setItem('login', false);\n    setAuthToken(false);\n    dispatch(setCurrentUser({}));\n    history.push('/login');\n}\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n}"]},"metadata":{},"sourceType":"module"}