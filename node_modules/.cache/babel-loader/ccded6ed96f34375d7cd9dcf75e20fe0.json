{"ast":null,"code":"var _jsxFileName = \"/home/dev/Bureau/final_test/test-simplon/src/components/register.js\";\nimport React, { Component } from 'react';\nimport { MDBRow, MDBCol, MDBCard, MDBCardBody, MDBBtn } from \"mdbreact\";\nimport { MDBInput } from \"mdbreact\";\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { registerUser } from '../actions/authentificate';\nimport { Redirect } from 'react-router-dom';\nimport classnames from 'classnames';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\nclass Register extends Component {\n  constructor() {\n    super();\n\n    this.renderRedirect = () => {\n      if (localStorage.getItem('login') == 'true') {\n        return React.createElement(Redirect, {\n          to: \"/admin\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        });\n      } else {\n        console.log('test');\n      }\n    };\n\n    this.state = {\n      nom: '',\n      prenom: \"\",\n      email: '',\n      password: '',\n      password_confirm: '',\n      errors: {}\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const user = {\n      nom: this.state.nom,\n      prenom: this.state.prenom,\n      email: this.state.email,\n      specialite: this.state.specialite,\n      password: this.state.password,\n      password_confirm: this.state.password_confirm\n    };\n    this.props.registerUser(user, this.props.history);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  // componentWillReceiveProps(nextProps) {\n  //     if(nextProps.auth.isAuthenticated) {\n  //         this.props.history.push('/')\n  //     }\n  //     if(nextProps.errors) {\n  //         this.setState({\n  //             errors: nextProps.errors\n  //         });\n  //     }\n  // }\n  // componentDidMount() {\n  //     if(this.props.auth.isAuthenticated) {\n  //         this.props.history.push('/');\n  //     }\n  // }\n  render() {\n    const errors = this.state.errors;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.renderRedirect(), React.createElement(\"div\", {\n      id: \"corps\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(MDBRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(MDBCol, {\n      md: \"0,5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(MDBCol, {\n      md: \"6\",\n      className: \"mx-auto mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(MDBCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(MDBCardBody, {\n      className: \"mx-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"text text-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"S'inscrire\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(MDBInput, {\n      label: \"Nom\",\n      icon: \"user\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      className: classnames('form-control form-control-lg', {\n        'is-invalid': errors.name\n      }),\n      name: \"nom\",\n      onChange: this.handleInputChange,\n      value: this.state.nom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), errors.name && React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, errors.name)), React.createElement(\"div\", {\n      id: \"prenom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(MDBInput, {\n      label: \"Prenom\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      className: classnames('form-control form-control-lg', {\n        'is-invalid': errors.name\n      }),\n      name: \"prenom\",\n      onChange: this.handleInputChange,\n      value: this.state.prenom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), errors.name && React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, errors.name)), React.createElement(\"div\", {\n      id: \"mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(MDBInput, {\n      label: \"email\",\n      group: true,\n      type: \"email\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      className: classnames('form-control form-control-lg', {\n        'is-invalid': errors.email\n      }),\n      name: \"email\",\n      onChange: this.handleInputChange,\n      value: this.state.email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), errors.email && React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, errors.email)), React.createElement(\"div\", {\n      id: \"specialite\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(MDBInput, {\n      label: \"Sp\\xE9cialit\\xE9\",\n      group: true,\n      type: \"text\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      className: classnames('form-control form-control-lg', {\n        'is-invalid': errors.specialite\n      }),\n      name: \"specialite\",\n      onChange: this.handleInputChange,\n      value: this.state.specialite,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), errors.specialite && React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, errors.specialite)), React.createElement(\"div\", {\n      id: \"Mot de pass\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(MDBInput, {\n      label: \"Mot de passe\",\n      group: true,\n      type: \"password\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      className: classnames('form-control form-control-lg', {\n        'is-invalid': errors.password\n      }),\n      name: \"password\",\n      onChange: this.handleInputChange,\n      value: this.state.password,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), errors.password && React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, errors.password)), React.createElement(\"div\", {\n      id: \"password2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(MDBInput, {\n      label: \"confirmer mot de passe\",\n      group: true,\n      type: \"password\",\n      validate: true,\n      error: \"wrong\",\n      success: \"right\",\n      className: classnames('form-control form-control-lg', {\n        'is-invalid': errors.password_confirm\n      }),\n      name: \"password_confirm\",\n      onChange: this.handleInputChange,\n      value: this.state.password_confirm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), errors.password_confirm && React.createElement(\"div\", {\n      className: \"invalid-feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, errors.password_confirm)), React.createElement(MDBBtn, {\n      type: \"submit\",\n      gradient: \"purple\",\n      id: \"bt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Inscrire\")), this.state.message)))))));\n  }\n\n}\n\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  registerUser\n})(withRouter(Register));","map":{"version":3,"sources":["/home/dev/Bureau/final_test/test-simplon/src/components/register.js"],"names":["React","Component","MDBRow","MDBCol","MDBCard","MDBCardBody","MDBBtn","MDBInput","connect","PropTypes","withRouter","registerUser","Redirect","classnames","Register","constructor","renderRedirect","localStorage","getItem","console","log","state","nom","prenom","email","password","password_confirm","errors","handleInputChange","bind","handleSubmit","e","setState","target","name","value","preventDefault","user","specialite","props","history","componentWillReceiveProps","nextProps","render","message","propTypes","func","isRequired","auth","object","mapStateToProps"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport { MDBRow, MDBCol, MDBCard, MDBCardBody, MDBBtn} from \"mdbreact\";\nimport { MDBInput } from \"mdbreact\";\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { registerUser } from '../actions/authentificate';\nimport { Redirect } from 'react-router-dom';\nimport classnames from 'classnames';\n\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport 'react-confirm-alert/src/react-confirm-alert.css'\n\nclass Register extends Component {\n    constructor() {\n        super();\n        this.state = {\n            nom: '',\n            prenom:\"\",\n            email: '',\n            password: '',\n            password_confirm: '',\n            errors: {}\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const user = {\n            nom: this.state.nom,\n            prenom: this.state.prenom,\n            email: this.state.email,\n            specialite:this.state.specialite,\n            password: this.state.password,\n            password_confirm: this.state.password_confirm,\n        }\n        this.props.registerUser(user, this.props.history);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            });\n        }\n    }\n\n    renderRedirect = () => { \n      if (localStorage.getItem('login') == 'true') { \n        return <Redirect to='/admin' /> \n      } else { \n        console.log('test'); \n      } \n    }\n  \n    // componentWillReceiveProps(nextProps) {\n    //     if(nextProps.auth.isAuthenticated) {\n    //         this.props.history.push('/')\n    //     }\n    //     if(nextProps.errors) {\n    //         this.setState({\n    //             errors: nextProps.errors\n    //         });\n    //     }\n    // }\n\n    // componentDidMount() {\n    //     if(this.props.auth.isAuthenticated) {\n    //         this.props.history.push('/');\n    //     }\n    // }\n\n  render() {\n    const { errors } = this.state;\n    return (\n      <div>\n        {this.renderRedirect()}\n        <div id=\"corps\">\n          <MDBRow>\n          <MDBCol md=\"0,5\"></MDBCol>\n            <MDBCol md=\"6\"  className=\"mx-auto mt-2\">\n              <MDBCard>\n                <MDBCardBody className=\"mx-6\">\n\n                  <h2 className=\"text text-primary\">S'inscrire</h2>\n                  <form onSubmit={ this.handleSubmit }>\n                  <div id=\"name\">\n                    <MDBInput label=\"Nom\" icon=\"user\" group type=\"text\" validate error=\"wrong\" success=\"right\" \n                    className={classnames('form-control form-control-lg', {'is-invalid': errors.name })} name=\"nom\"\n                    onChange={ this.handleInputChange }\n                    value={ this.state.nom }/>\n                    {errors.name && (<div className=\"invalid-feedback\">{errors.name}</div>)}\n                  </div> \n                  <div id=\"prenom\">\n                    <MDBInput label=\"Prenom\" group type=\"text\" validate error=\"wrong\" success=\"right\" \n                    className={classnames('form-control form-control-lg', {'is-invalid': errors.name })} name=\"prenom\"\n                    onChange={ this.handleInputChange }\n                    value={ this.state.prenom }/>\n                    {errors.name && (<div className=\"invalid-feedback\">{errors.name}</div>)}\n                  </div>\n                  <div id=\"mail\">\n                    <MDBInput label=\"email\" group type=\"email\" validate error=\"wrong\" success=\"right\" \n                    className={classnames('form-control form-control-lg', {'is-invalid': errors.email })} name=\"email\"\n                    onChange={ this.handleInputChange }\n                    value={ this.state.email }/>\n                    {errors.email && (<div className=\"invalid-feedback\">{errors.email}</div>)}\n                  </div>\n                  <div id=\"specialite\">\n                    <MDBInput label=\"Spécialité\" group type=\"text\" validate error=\"wrong\" success=\"right\" \n                    className={classnames('form-control form-control-lg', {'is-invalid': errors.specialite })} name=\"specialite\"\n                    onChange={ this.handleInputChange }\n                    value={ this.state.specialite }/>\n                    {errors.specialite && (<div className=\"invalid-feedback\">{errors.specialite}</div>)}\n                  </div>\n                  <div id=\"Mot de pass\">\n                    <MDBInput label=\"Mot de passe\" group type=\"password\" validate error=\"wrong\" success=\"right\" \n                    className={classnames('form-control form-control-lg', {'is-invalid': errors.password })}  name=\"password\"\n                    onChange={ this.handleInputChange }\n                    value={ this.state.password }/>\n                    {errors.password && (<div className=\"invalid-feedback\">{errors.password}</div>)}\n                  </div>\n                  <div id=\"password2\">\n                    <MDBInput label=\"confirmer mot de passe\" group type=\"password\" validate error=\"wrong\" success=\"right\" \n                    className={classnames('form-control form-control-lg', {'is-invalid': errors.password_confirm })} name=\"password_confirm\"\n                    onChange={ this.handleInputChange }\n                    value={ this.state.password_confirm }/>\n                    {errors.password_confirm && (<div className=\"invalid-feedback\">{errors.password_confirm}</div>)}\n                  </div>\n                    <MDBBtn type=\"submit\" gradient=\"purple\" id=\"bt\" ><a>Inscrire</a></MDBBtn>{this.state.message}\n\n                  </form>\n                </MDBCardBody>\n              </MDBCard>\n            </MDBCol>\n          </MDBRow>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nRegister.propTypes = {\n    registerUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps,{ registerUser })(withRouter(Register))"]},"metadata":{},"sourceType":"module"}